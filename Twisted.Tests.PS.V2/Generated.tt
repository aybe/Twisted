<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#

    const string testsDirectory = ".twisted";
    const string testsNamespace = "TwistedTests";
    const string testsRunMethod = "TwistedTests.Tester.Test";
    var testsIncludes = new[] {"*.*"};
    var testsExcludes = new[] {"*.INF", "*.BAK", "*.CFG", "*.CNT", "*.EXE", "*.GID", "*.HLP", "*.DLL", "*.ICO", "*.TXT", "*.AVI", "*.04", "*.06", "*.07", "*.21", "*.61", "*.67", "*.CNF", "*.SYM"};
    
    testsIncludes = new[] {"*.DMD"};
    testsExcludes = new string[0];
    
    var path = GetPath(testsDirectory, Host.ResolvePath("."));

    var dictionary = Directory.GetDirectories(path).ToDictionary(s => s, s => GetFiles(s, testsIncludes, testsExcludes));
#>
// this file contains <#= dictionary.Sum(s => s.Value.Length) #> generated tests

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace <#= testsNamespace #>
{
<#
    foreach (var pair in dictionary)
    {
        var directory = pair.Key;
        var files = pair.Value;
#>
    [TestClass]
    public partial class <#= directory.Substring(path.Length + 1) #>
    {
        public TestContext TestContext { get; set; }

<#
        foreach (var file in files)
        {
#>
        [TestMethod]
        [TestCategory("<#= Path.GetExtension(file) #>")]
        public void <#=
                GetName(file.Substring(directory.Length + 1)) #>()
        {
            <#=testsRunMethod #>(TestContext, @"<#=file #>");
        }

<#
        }
#>
    }

<#
    }

#>
}
<#+
    private static string[] GetFiles(string path, string[] includes, string[] excludes)
    {
        var included = includes.SelectMany(s => Directory.GetFiles(path, s, SearchOption.AllDirectories));
        var excluded = excludes.Select(s => new Regex($"^{Regex.Escape(s).Replace(@"\*", ".*").Replace(@"\?", ".")}$")).ToArray();
        var filtered = included.Where(s => !excluded.Any(t => t.IsMatch(s))).ToArray();

        return filtered;
    }

    private static string GetName(string value)
    {
        return value.Replace('.', '_').Replace('\\', '_');
    }

    private static string GetPath(string path, string directory)
    {
        if (string.IsNullOrWhiteSpace(path))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(path));

        if (string.IsNullOrWhiteSpace(directory))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(directory));

        var info = new DirectoryInfo(directory);

        while (info != null)
        {
            var combine = Path.Combine(info.FullName, path);

            if (Directory.Exists(combine) || File.Exists(combine))
            {
                return combine;
            }

            info = info.Parent;
        }

        throw new DirectoryNotFoundException();
    }#>