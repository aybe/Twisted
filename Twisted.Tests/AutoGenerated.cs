using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Twisted.Extensions;
using Twisted.IO;
using Twisted.PC;
using Twisted.PS.V2;

namespace Twisted.Tests;

public static class AutoGenerated
{
    public static void Test(TestContext context, string path)
    {
        using var stream = new BinaryStream(new MemoryStream(File.ReadAllBytes(path)));

        TreeNode treeNode;

        var extension = Path.GetExtension(path).ToUpperInvariant();

        switch (extension)
        {
            case ".DMD":
                treeNode = new DMD(new BinaryReader(stream));
                break;
            case ".DPC":
                treeNode = DPCTester.Test(context, stream); 
                break;
            default: throw new NotSupportedException(extension);
        }

        int count = 0, depth = 0;

        treeNode.TraverseDFS(node =>
        {
            count += 1;
            depth =  Math.Max(depth, node.Depth);
        });

        context.WriteLine();
        
        var visited = stream.GetRegions(BinaryStreamRegionKind.Reading, BinaryStreamRegionType.Visited).ToArray();
        var ignored = stream.GetRegions(BinaryStreamRegionKind.Reading, BinaryStreamRegionType.Ignored).ToArray();

        var visitedSum = visited.Sum(s => s.Length);
        var ignoredSum = ignored.Sum(s => s.Length);
        var visitedPct = (double)visitedSum / stream.Length;
        var ignoredPct = (double)ignoredSum / stream.Length;

        context.WriteLine($"Regions visited: {visited.Length} ({visitedPct:P3})");
        context.WriteLine($"Regions ignored: {ignored.Length} ({ignoredPct:P3})");
        context.WriteLine();

        context.WriteLine($"Tree depth: {depth}");
        context.WriteLine($"Tree nodes: {count}");
        context.WriteLine();

        context.WriteLine(treeNode.Print());
        context.WriteLine();

        context.WriteLine($"Regions visited: {visited.Length}");

        foreach (var region in visited)
        {
            context.WriteLine(region);
        }

        context.WriteLine();

        context.WriteLine($"Regions ignored: {ignored.Length}");

        foreach (var region in ignored)
        {
            context.WriteLine(region);
        }

        context.WriteLine();

        Assert.IsTrue(visitedSum <= stream.Length, "More than 100% data visited.");
        Assert.IsTrue(ignoredSum <= stream.Length, "More than 100% data ignored.");

        Assert.AreEqual(stream.Length, visitedSum + ignoredSum, "Sum of visited and ignored mismatch stream length.");

        // Assert.IsTrue(visitedSum == stream.Length, $"Visited: {visitedPct:P3}.");
    }
}