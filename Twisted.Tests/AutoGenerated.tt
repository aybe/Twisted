<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Twisted.Tests;
<#
    if (!TryFindUpwardPath(".twisted", this.Host.ResolvePath("."), out var path))
        throw new DirectoryNotFoundException();
    
    var directories = Directory.EnumerateDirectories(path);

    foreach(var directory in directories)
    {
        var className = Path.GetFileName(directory);
#>

[TestClass]
public sealed class <#= className #>
{
    public TestContext TestContext { get; set; }
<#
        var files = EnumerateFiles(directory, SearchOption.AllDirectories, "*.DMD", "*.DPC");

        foreach(var file in files)
        {
            var testName = file.Substring(path.Length + 1).Replace('\\', '_').Replace('.', '_');
#>

    [TestMethod]
    public void <#= testName #>()
    {
        AutoGenerated.Test(TestContext, @"<#= file #>");
    }
<#
    }
#>
}
<#
}
#>
<#+ 
    public IEnumerable<string> EnumerateFiles(string directory, SearchOption searchOption, params string[] searchFilters)
    {
        foreach(var searchFilter in searchFilters)
        {
            var files = Directory.EnumerateFiles(directory, searchFilter, searchOption);

            foreach(var file in files)
            {
                yield return file;
            }
        }
    }
    
    public static bool TryFindUpwardPath(string path, string directory, out string result)
    {
        if (string.IsNullOrWhiteSpace(path))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(path));

        if (string.IsNullOrWhiteSpace(directory))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(directory));

        result = default!;

        var info = new DirectoryInfo(directory);

        while (info != null)
        {
            var combine = Path.Combine(info.FullName, path);

            if (Directory.Exists(combine) || File.Exists(combine))
            {
                result = combine;
                return true;
            }

            info = info.Parent;
        }

        return false;
    }
#>