<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Twisted.Tests
{
    public sealed partial class AutoGenerated
    {
<# 
    var path = FindParentPath(".twisted", this.Host.ResolvePath("."));
    
    var files = Directory.GetFiles(path, "*.dpc", SearchOption.AllDirectories);
    
    foreach(var file in files)
    {
        var name = file.Substring(path.Length + 1).Replace('\\', '_').Replace('.', '_');
#>
        [TestMethod]
        public void <#= name #>()
        {
            Test(@"<#= file #>");
        }

<#
    }
#>
    }
}
<#+ 
    public static string FindParentPath(string path, string directory)
    {
        if (string.IsNullOrWhiteSpace(path))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(path));

        if (string.IsNullOrWhiteSpace(directory))
            throw new ArgumentException("Value cannot be null or whitespace.", nameof(directory));

        var info = new DirectoryInfo(directory);

        while (info != null)
        {
            var combine = Path.Combine(info.FullName, path);

            if (Directory.Exists(combine) || File.Exists(combine))
            {
                return combine;
            }

            info = info.Parent;
        }

        return null;
    }
#>